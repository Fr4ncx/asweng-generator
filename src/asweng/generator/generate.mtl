[comment encoding = UTF-8 /]
[module generate('http://www.example.org/data_Analysis')]


[template public generateElement(aPipeline : Pipeline)]
	[comment @main/]
	[file ('pipeline.txt', false, 'UTF-8')]
		[let aTask: Task = aPipeline.tasks->filter(DataCollectionTask)->select(task | isFirstElementInTheTree(aPipeline, task))->first()]
[generateNextTask(aTask)/]

		[/let]
	[/file]
[/template]


[**
*	It returns true if there is no dataFlow connected to the given task, otherwise false.
*	@params task: Task
*]
[query private isFirstElementInTheTree(aPipeline : Pipeline, aTask : Task) : Boolean = flows.oclAsSet()->forAll(flow | flow.toTask <> aTask) /]

[**
*	It generates the next task
*	@params task: Task
*]
[template private generateNextTask(aTask : Task)]
[generateTask(aTask) /]
[generateNextFlow(aTask) /]
[/template]

[**
*	It generates the next flow for a given task
*	@params task: Task
*]
[template public generateNextFlow(aTask : Task)]
	[if (aTask.oclIsUndefined() <> true and aTask.toFlow.oclIsUndefined() <> true)]
		[let aFlow: DataFlow = aTask.toFlow]
Output data :
[getFlowCollectionDetails(aFlow) /]
			[if (aFlow.oclIsUndefined() <> true and aFlow.toTask.oclIsUndefined() <> true)]
				[let t: Task = aFlow.toTask]
[generateNextTask(aFlow.toTask) /]
				[/let]
			[/if]
		[/let]
	[else]


---- End of the PipeLine ----
	[/if]

[/template]

[**
*	It generates the task details
*	@params task: Task
*]
[template private generateTask(aTask : Task)]
----------------------
[getType(aTask)/]
[if (aTask.isExecuted)]
Executed at: [aTask.executionTimestamp/]
[else]
Not executed yet...
[/if]
----------------------

[getTaskDetails(aTask)/]
[/template]

[**
*	It returns the type of the task
*	@params task: Task
*]
[template private getType(aTask : Task)]
 [if (aTask.oclIsTypeOf(DataCollectionTask))] 
DataCollection task
  [elseif (aTask.oclIsTypeOf(DataCleaning))] 
DataCleaning task
  [elseif (aTask.oclIsTypeOf(DataAnalysisTask))] 
DataAnalysis task
  [elseif (aTask.oclIsTypeOf(DataVisualizationTask))] 
DataVisualization task
  [elseif (aTask.oclIsTypeOf(ExportDataTask))] 
DataExport task
  [else] 
DataIntegration task
 [/if]
[/template]


[**
*	Prints the task details
*	@params task: Task
*]
[template private getTaskDetails(aTask : Task)]
[comment data collection task details /]
[if (aTask.oclIsTypeOf(DataCollectionTask))] 
	[comment source detail /]
	[let source: Source = aTask.oclAsType(DataCollectionTask).source]
[printSourceDetails(source) /]
	[/let]
	[comment conditions detail /]
	[let condition: Condition = aTask.oclAsType(DataCollectionTask).condition]
[printConditionDetails(condition) /]
	[/let]
[/if]
[comment data cleaning task details /]
[if (aTask.oclIsTypeOf(DataCleaning))] 
	[let operations: OrderedSet(Operation) = aTask.oclAsType(DataCleaning).operations]
Operation list:

		[for(operation: Operation | operations)]
[printOperationDetails(operation) /]
		[/for]
	[/let]
[/if]
[comment data analysis task details /]
[if (aTask.oclIsTypeOf(DataAnalysisTask))] 
	[let category: Category = aTask.oclAsType(DataAnalysisTask).category]
[printCategoryDetails(category) /]
	[/let]
[/if]
[comment data visualization task details /]
[if (aTask.oclIsTypeOf(DataVisualizationTask))] 
	[comment graphic element details /]
	[let graphicElements: OrderedSet(GraphicElement) = aTask.oclAsType(DataVisualizationTask).visualElements]
		[for(graphicElement: GraphicElement | graphicElements)]
[printGraphicElementDetails(graphicElement) /]
		[/for]
	[/let]
	[comment table details /]
	[let tables: OrderedSet(Table) = aTask.oclAsType(DataVisualizationTask).tables]
		[for(table: Table | tables)]
[printTableDetails(table) /]
		[/for]
	[/let]
[/if]
[comment data export task details /]
[if (aTask.oclIsTypeOf(ExportDataTask))] 
Export format: [aTask.oclAsType(ExportDataTask).format /]
[/if]
[/template]


[**
*	Prints the details of a given dataFlow
*	@params DataFlow
*]
[template private getFlowCollectionDetails(flow: DataFlow)]
[if (flow.collection.oclIsUndefined() <> true)]
	[for(document: Document | flow.collection.documents)]

Document: [document.name/]
		[for(attribute: Attribute | document.attributes)]
- [attribute.name /] = [attribute.value /] ([attribute.type /])
		[/for]
	[/for]
[/if]
[/template]

[**
*	Prints the details of a given source
*	@params Source
*]
[template private printSourceDetails(asource : Source)]
[if (asource.oclIsTypeOf(RestService))] 
RestService --

User: [asource.oclAsType(Database).user /]
Pwd: [asource.oclAsType(Database).pwd /]
  [elseif (asource.oclIsTypeOf(Database))] 
Database --

Port: [asource.oclAsType(Database).port   /]
User: [asource.oclAsType(Database).user /]
Pwd: [asource.oclAsType(Database).pwd /]
  [elseif (asource.oclIsTypeOf(File))] 
File --

Url: [asource.oclAsType(File).url /]
 [/if]
[/template]


[**
*	Prints the details of a given condition
*	@params Condition
*]
[template private printConditionDetails(condition: Condition)]
Conditions --  [condition.name /]
	[for( logicalExp : LogicalExp | condition.expressions)]
         [logicalExp.name /]
		[for( valueCond : ValueCondition | logicalExp.valueconditions)]
[valueCond.attribute /] -> [valueCond.value /]
		[/for]
	[/for]
[/template]

[**
*	Prints the details of a given operation
*	@params Operation
*]
[template private printOperationDetails(operation : Operation)]
[if (operation.oclIsTypeOf(RemoveNull))] 
- RemoveNull([operation.name /])
  [elseif (operation.oclIsTypeOf(FormatData))] 
- FormatData([operation.name /])
  [elseif (operation.oclIsTypeOf(Custom))] 
- Custom([operation.name /])
 [/if]
[/template]

[**
*	Prints the details of a given category
*	@params Category
*]
[template private printCategoryDetails(category : Category)]
[if (category.oclIsTypeOf(Prediction))] 
- Category: Prediction
  [elseif (category.oclIsTypeOf(Classification))] 
- Category: Classification
  [elseif (category.oclIsTypeOf(Clustering))] 
- Category: Clustering
   [elseif (category.oclIsTypeOf(Description))] 
- Category: Description
 [/if]
[/template]

[**
*	Prints the details of a given graphicElement
*	@params GraphicElement
*]
[template private printGraphicElementDetails(graphicElement : GraphicElement)]
	[if (graphicElement.oclIsTypeOf(Diagram))] 
- Diagram
	[elseif (graphicElement.oclIsTypeOf(Graph))] 
- Graph
		[let elements: OrderedSet(GraphElement) = graphicElement.oclAsType(Graph).elements]
Number of elements(node and edge) [elements->size()/]
		[/let]
 	[/if]
[/template]

[**
*	Prints the details of a given table
*	@params Table
*]
[template private printTableDetails(table : Table)]
- Table
	[let rows: OrderedSet(Row) = table.rows]
Number of rows [rows->size()/]
	[/let]
[/template]